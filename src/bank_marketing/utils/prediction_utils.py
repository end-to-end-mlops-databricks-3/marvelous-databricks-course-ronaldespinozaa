"""Utility functions for adjusting predictions from models.

These functions provide additional processing for model predictions,
such as confidence adjustments, thresholding, and output formatting.
"""

import numpy as np
import pandas as pd


def adjust_predictions(predictions: np.ndarray, confidence_boost: float = 0.05) -> np.ndarray:
    """Adjust predictions with a confidence boost.

    This is a simple example of custom logic that could be applied
    to predictions after they are generated by the model.

    Args:
        predictions: NumPy array of prediction values (0 or 1)
        confidence_boost: Amount to randomly boost predictions (default: 0.05)

    Returns:
        Adjusted predictions

    """
    # This is just a demonstration - in a real scenario you would
    # implement meaningful business logic here

    # Create a copy to avoid modifying the original
    adjusted = predictions.copy()

    # Apply a random boost to some predictions (just as an example)
    boost_mask = np.random.random(len(predictions)) < confidence_boost

    # If the prediction was 0 and we boost it, flip to 1
    flip_indices = np.where((adjusted == 0) & boost_mask)[0]
    adjusted[flip_indices] = 1

    return adjusted


def format_prediction_output(
    predictions: np.ndarray | pd.Series, probabilities: np.ndarray | pd.Series | None = None, threshold: float = 0.5
) -> pd.DataFrame:
    """Format model predictions into a standardized output structure.

    Args:
        predictions: NumPy array of prediction values (0 or 1)
        probabilities: Optional NumPy array of prediction probabilities
        threshold: Probability threshold used for classification

    Returns:
        Dictionary with formatted predictions

    """
    result = {
        "predictions": predictions.tolist(),
        "metadata": {
            "count": len(predictions),
            "positive_count": int(np.sum(predictions)),
            "positive_rate": float(np.mean(predictions)),
        },
    }

    # Add probabilities if available
    if probabilities is not None:
        result["probabilities"] = probabilities.tolist()
        result["threshold"] = threshold

    return result
